generator client {
  provider = "prisma-client-js"
}

// local dev with mysql
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// vercel deploy with postgresql
// datasource db {
//   provider  = "postgresql"
//   url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
//   directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
// }

/// 以下為product相關資料表定義
model Brand {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  @@map("brand")
}

model Color {
  id             Int    @id @default(autoincrement())
  name           String @db.VarChar(50)
  colorPaletteId Int    @map("color_palette_id")

  @@map("color")
}

model ColorPalette {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(50)

  @@map("color_palette")
}

model Image {
  id           Int    @id @default(autoincrement())
  productSkuId Int    @map("product_sku_id")
  name         String @db.VarChar(150)
  image        String @db.VarChar(300)
  sortOrder    Int    @map("sort_order")

  @@map("image")
}

model Product {
  id            Int      @id @default(autoincrement())
  name          String   @db.VarChar(100)
  brandId       Int      @map("brand_id")
  discription   String   @db.Text
  price         Int      @default(0)
  discountPrice Int?     @map("discount_price")
  createdAt     DateTime @default(now()) @map("created_at")

  @@map("product")
}

model ProductSku {
  // id        Int    @id @default(autoincrement())
  //id 改為1-1, 1-2, 1-3 (productId-colorId)
  id        String @id @db.VarChar(20)
  productId Int    @map("product_id")
  name      String @db.VarChar(100)
  colorId   Int    @map("color_id")
  stock     Int    @default(0)

  @@map("product_sku")
}

model Spec {
  // id        Int    @id @default(autoincrement())
  productId    Int     @id @map("product_id")
  name         String  @db.VarChar(100)
  neckPickup   String? @map("neck_pickup") @db.VarChar(100)
  middlePickup String? @map("middle_pickup") @db.VarChar(100)
  bridgePickup String? @map("bridge_pickup") @db.VarChar(100)
  controls     String? @db.VarChar(300)
  switching    String? @db.VarChar(300)

  @@map("spec")
}

model Coupons {
  id             Int          @id @default(autoincrement())
  name           String
  code           String?      @unique // 優惠券代碼 (例如：SUMMER20)
  typeId         Int //type fk
  type           CouponType   @relation(fields: [typeId], references: [id]) // 優惠券類型 (關係)
  discount       Int // 折扣金額或百分比 (根據 discount_type 決定)
  discountTypeId Int // discountType fk
  discountType   DiscountType @relation(fields: [discountTypeId], references: [id]) // 折扣類型 (關係)
  minPurchase    Decimal? //最低消費金額
  description    String? // 優惠券描述 (nullable)
  startTime      DateTime
  endTime        DateTime
  is_delete      Boolean      @default(false)

  @@index([code]) // 建立 code 索引
}

model CouponType {
  id       Int       @id @default(autoincrement())
  category String
  coupons  Coupons[]
}

model DiscountType {
  id      Int       @id @default(autoincrement())
  name    String
  coupons Coupons[]
}

model Activity {
  id           Int    @id @default(autoincrement())
  name         String @unique
  ticket_price Int    @default(0)
}

model Rent {
  id          Int             @id @default(autoincrement())
  name        String
  level       Int
  description String?
  rentBrandId Int?
  rentBrand   RentBrand?      @relation(fields: [rentBrandId], references: [id])
  rentColors  RentItemColor[]
  stores_id   Int?
  stores      Stores?         @relation(fields: [stores_id], references: [id])
  price       Decimal?
  RentList_id Int?
  RentList    RentList?       @relation(fields: [RentList_id], references: [id])
  time_start  DateTime?
  time_end    DateTime?
  created_at  DateTime        @default(now())
  rentImges   RentImges[] // 一個 Rent 可以有多個圖片
}

model RentBrand {
  id    Int    @id @default(autoincrement())
  name  String
  rents Rent[] // 一個品牌可以有多個租賃物品
}

model RentColor {
  id             Int             @id @default(autoincrement())
  name           String
  rentItemColors RentItemColor[] // 修改關聯名稱，保持一致性
}

model RentItemColor {
  id          Int       @id @default(autoincrement())
  rentId      Int
  rent        Rent      @relation(fields: [rentId], references: [id])
  rentColorId Int
  rentColor   RentColor @relation(fields: [rentColorId], references: [id])
  stock       Int
}

model RentList {
  id           Int     @id @default(autoincrement())
  rentId       Int
  name         String  @db.VarChar(100)
  neckPickup   String? @map("neck_pickup") @db.VarChar(100)
  middlePickup String? @map("middle_pickup") @db.VarChar(100)
  bridgePickup String? @map("bridge_pickup") @db.VarChar(100)
  controls     String? @db.VarChar(300)
  switching    String? @db.VarChar(300)
  rents        Rent[]
}

model RentImges {
  id    Int    @id @default(autoincrement())
  name  String @db.VarChar(150)
  image String @db.VarChar(300)

  // 外鍵，指向 Rent 的 id
  rentId Int
  rent   Rent? @relation(fields: [rentId], references: [id], onDelete: Cascade)
}

model Stores {
  id            Int    @id @default(autoincrement())
  name          String @unique
  address       String @unique
  address_phone String @default("")
  rents         Rent[] // 關聯到 Rent 表
}
